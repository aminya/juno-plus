################################################################
# Snippets for Julia Language
################################################################
".source.julia":
################################################################
## Basics and Arithmetic
################################################################
  "Swap":
    prefix: "swap"
    body: '''
    ${1:x}, ${2:y} = ${1:x}, ${2:y}
    '''
################################################################
  "Constant":
    prefix: "const"
    body: '''
    const ${1:varname} = ${2:value}
    '''
################################################################
  "!.":
    prefix: "!."
    body: '''
    (!).(${1:var})
    '''
################################################################
  "null":
    prefix: "null"
    body: 'nothing'
################################################################
  "nan":
    prefix: "nan"
    body: 'NaN'
################################################################
## Commenting
################################################################
  "Separator":
    prefix: "sep"
    body: '''
################################################################
    '''
################################################################
  "Comment Block":
    prefix: "com"
    body: '''
    #= ${1:comment} =#
    '''
################################################################
## Strings and Characters
################################################################
  "Triple \" ":
    prefix: "q3"
    body: '''
"""
${1:body}
"""
    '''
################################################################
  "Character Code":
    prefix: "char code"
    body: '''
    Int('${1:C}')
    '''
################################################################
  "Character from Code":
    prefix: "char from code"
    body: '''
    Char('${1:65}')
    '''
################################################################
  "UTF charecter":
    prefix: "utf"
    body: '''
    '\\\\u${1:65}'
    '''
################################################################
  "Loop through charecters":
    prefix: "for char"
    body: '''
    for ${1:c} in ${2:str}
      ${3:body}
    end
    '''
################################################################
  "First matching string":
    prefix: "findfirst string"
    body: '''
    findfirst("${1:find}", "${2:source}")
    '''
################################################################
  "Find and replace string":
    prefix: "replace string"
    body: '''
    replace("${1:source}", "${2:find}"=>"${3:replace}")
    '''
################################################################
## Types
################################################################
  "Int":
    prefix: "int"
    body: 'Int'
################################################################
  "UInt":
    prefix: "uint"
    body: 'UInt'
################################################################
  "Float32":
    prefix: "single"
    body: 'Float32'
################################################################
  "Float64":
    prefix: "double"
    body: 'Float64'
################################################################
  "Parametric type":
    prefix: "Type parametric"
    body: '${1:name}{${2:Parameter}}'
################################################################
  "Union{}":
    prefix: "Union"
    body: """
  Union{${1:type1},${2:type2}}
  """
################################################################
  "Union{Nothing,type}":
    prefix: "UN"
    body: """
  Union{Nothing,${1:type}}
  """
################################################################
  "where":
    prefix: "where"
    body: """
  where {${1:T}}
  """
################################################################
  "where multi":
    prefix: "where multi"
    body: """
  where {${1:T}, ${2:N}}
  """
################################################################
  "where <:":
    prefix: "where upper"
    body: """
  where {${1:T1}<:${2:T2}}
  """
################################################################
  "UnionAll using where":
    prefix: "UnionAll where"
    body: """
  ${1:name}{${2:T}} where {${2:T}}
  """
################################################################
  "Parametric abstract type":
    prefix: "abstract type parametric"
    body: """
  abstract type ${1:name}{${2:Parameter}} end
  """
################################################################
  "typeof subtype":
    prefix: "typeof subtype"
    body: """
  typeof(${1:object}) <: ${2:type}
  """
################################################################
  "typeof isa":
    prefix: "typeof isa"
    body: """
  isa(${1:object}, ${2:type})
  """
################################################################
## Structs
################################################################
  "inherited Struct":
    prefix: "struct inherited"
    body: """
  struct ${1:name} <: ${2:BaseType}
    \t${3:fields}
  end
  """
################################################################
  "Parametric Struct":
    prefix: "struct parametric"
    body: """
  struct ${1:name}{${2:Parameter}}
    \t${3:fields}
  end
  """
################################################################
  "Parametric inherited Struct":
    prefix: "struct parametric inherited"
    body: """
  struct ${1:name}{${2:Parameter}} <: ${3:BaseType}
    \t${4:fields}
  end
  """
################################################################
  "Struct field names":
    prefix: "struct field names"
    body: 'fieldnames(${1:structName})'
################################################################
  "Struct field types":
    prefix: "struct field types"
    body: '${1:structName}.types'
################################################################
## Conditionals
################################################################
  "switch":
    prefix: "switch case"
    body: """
  if ${1:var} == ${2:value1}

  elseif ${1:var} == ${3:value2}

  elseif ${1:var} == ${4:value3}

  else

  end
  """
################################################################
  "if elseif":
    prefix: "if elseif"
    body: """
  if ${1:condition1}

  elseif ${2:condition2}

  else ${4:condition3}

  end
  """
################################################################
  "try catch full":
    prefix: "try catch full"
    body: """
  try
    ${1:failable}
  catch ex
    if isa(ex, ${2:SomeExcep})
        ${3:handle}
    elseif isa(ex, ${4:SomeExcep2})
        ${5:handle2}
    else
        ${6:handleOther}
    end
  finally
    ${7:doAnyWays}
  end
  """
################################################################
## Loops
################################################################
  "enumeration - index, value":
    prefix: "for enumerate"
    body: """
  for (${1:i},${2:val}) in enumerate(${3:itter})
    ${4:body}
  end
  """
################################################################
  "nested loop - i,j":
    prefix: "for nested"
    body: """
  for ${1:i} in {2:vali}, ${3:j} in {4:valj}
    ${5:body}
  end
  """
################################################################
  "do while":
    prefix: "do while"
    body: """
  while true
    ${1:body}
    ${2:condition} && break
  end
  """
################################################################
  "break":
    prefix: "break"
    body: """
    if ${1:breakCondition}

      break
    end
  """
################################################################
  "continue":
    prefix: "continue"
    body: """
    if ${1:continueCondition}

      continue
    end
  """
################################################################
  "while with break":
    prefix: "while break"
    body: """
  while ${1:loopCondition}

    if ${2:breakCondition}

      break
    end

  end
  """
################################################################
  "for with break":
    prefix: "for break"
    body: """
  for ${1:loopCondition}

    if ${2:breakCondition}

      break
    end

  end
  """
################################################################
  "for with continue":
    prefix: "for continue"
    body: """
  for ${1:loopCondition}

    if ${2:continueCondition}

      continue
    end

  end
  """
################################################################
## Functions - Docstring
################################################################
  "Documented Function with Examples":
    prefix: "function doc example"
    body: '''
"""
    ${1:name}(${2:args})

${3:documentation}
# Examples
```julia
${4:examples}
```
"""
function ${1:name}(${2:args})
\t${4:body}
end
    '''
################################################################
  "Function Full":
    prefix: "function full"
    body: '''
"""
    ${1:name}(${2:args}; ${3:kwargs})::{4:returnType}

${5:documentation}
# Examples
```julia
${6:examples}
```
"""
function ${1:name}(${2:args}; ${3:kwargs})::{4:returnType}
\t${7:body}
  return {8:return value}
end
    '''
################################################################
  "Docstring":
    prefix: "doc"
    body: '''
"""
    ${1:name}(${2:args})

${3:documentation}
"""
    '''
################################################################
  "Docstring with Examples":
    prefix: "doc example"
    body: '''
"""
    ${1:name}(${2:args})

${3:documentation}
# Examples
```julia
${4:examples}
```
"""
    '''
################################################################
  "Julia Example block":
    prefix: "example"
    body: '''
# Examples
```julia
${1:examples}
```
    '''
################################################################
## Dictionaries - Collections
################################################################
  "key => val pair":
    prefix: "pair"
    body: '${1:key} => ${2:value}'
################################################################
  "Dict pair":
    prefix: "Dict pair"
    body: 'Dict(${1:key1} => ${2:value1}, ${3:key2} => ${4:value2})'
################################################################
  "Dict keys":
    prefix: "Dict keys"
    body: 'keys(${1:dict})'
################################################################
  "Dict values":
    prefix: "Dict values"
    body: 'values(${1:dict})'
################################################################
  "Loop through key-value pairs":
    prefix: "for Dict"
    body: '''
    for (${1:key},${2:value}) in ${3:dict}
        ${4:body}
    end
    '''
