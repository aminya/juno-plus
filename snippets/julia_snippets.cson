################################################################
# Snippets for Julia Language
################################################################

".source.julia":
################################################################
## Basics and Arithmetic
################################################################
  "Swap":
    prefix: "swap"
    body: '''
    ${1:x}, ${2:y} = ${1:x}, ${2:y}
    '''
################################################################
  "Constant":
    prefix: "const"
    body: '''
    const ${1:varname} = ${2:value}
    '''
################################################################

################################################################
## Commenting
################################################################
  "Separator":
    prefix: "sep"
    body: '''
################################################################
    '''
################################################################
  "Comment Block":
    prefix: "com"
    body: '''
    #= ${1:comment} =#
    '''
################################################################
## Strings and Charecters
################################################################
  "Triple \" ":
    prefix: "q3"
    body: '''
"""
${1:body}
"""
    '''
################################################################
  "Charecter Code":
    prefix: "charcode"
    body: '''
    Int('${1:C}')
    '''
################################################################
  "Charecter from Code":
    prefix: "charFromCode"
    body: '''
    Char('${1:65}')
    '''
################################################################
  "UTF charecter":
    prefix: "utf"
    body: '''
    '\\\\u${1:65}'
    '''
################################################################
  "Loop through charecters":
    prefix: "forchar"
    body: '''
    for ${1:c} in ${2:str}
      ${3:body}
    end
    '''
################################################################
  "First matching string":
    prefix: "findfirststring"
    body: '''
    findfirst("${1:find}", "${2:source}")
    '''
################################################################
  "Find and replace string":
    prefix: "replacestring"
    body: '''
    replace("${1:source}", "${2:find}"=>"${3:replace}")
    '''
################################################################
  "Regex literal":
    prefix: "regex"
    body: '''
    r"${1:regex}"
    '''
################################################################
## Types
################################################################
  "Int":
    prefix: "int"
    body: 'Int'
################################################################
  "UInt":
    prefix: "uint"
    body: 'UInt'
################################################################
  "Float32":
    prefix: "single"
    body: 'Float32'
################################################################
  "Float64":
    prefix: "double"
    body: 'Float64'
################################################################
################################################################
  "Documented Function with Examples":
    prefix: "functionde"
    body: '''
"""
    ${1:name}(${2:args})

${3:documentation}
# Examples
```julia
${4:examples}
```
"""
function ${1:name}(${2:args})
\t${4:body}
end
    '''

################################################################


  "Triple \" ":
    prefix: "q3"
    body: '''
"""
${1:body}
"""
    '''

################################################################

  "Docstring":
    prefix: "doc"
    body: '''
"""
    ${1:name}(${2:args})

${3:documentation}
"""
    '''

################################################################

  "Docstring with Examples":
    prefix: "doce"
    body: '''
"""
    ${1:name}(${2:args})

${3:documentation}
# Examples
```julia
${4:examples}
```
"""
    '''

################################################################

  "Julia Example block":
    prefix: "example"
    body: '''
# Examples
```julia
${1:examples}
```
    '''

################################################################

  "Union{Nothing,type}":
    prefix: "UN"
    body: """
  Union{Nothing,${1:type}}
  """
################################################################


################################################################
# Snippets for Weave Language
################################################################
'.source.weave.md':
################################################################

  'Hidden Output for Julia code chunk':
    'prefix': 'outJuliaFalse'
    'body': """
    ```{julia; results ="hidden"}
    $1
    ```
    """
################################################################


  'Non Echoed Julia code chunk':
    'prefix': 'echoJuliaFalse'
    'body': """
    ```{julia; echo=false}
    $1
    ```
    """

################################################################

  'Evaluated Julia code chunk':
    'prefix': 'evalJuliaTrue'
    'body': """
    ```{julia; eval=true}
    $1
    ```
    """

################################################################

  'Non-evaluated Julia code chunk':
    'prefix': 'evalJuliaFalse'
    'body': """
    ```{julia; eval=false}
    $1
    ```
    """

################################################################

  'Terminal Julia code chunk':
    'prefix': 'termJulia'
    'body': """
    ```{julia; term=true}
    $1
    ```
    """

################################################################

  'Hold the output for a Block of Julia code chunk':
    'prefix': 'holdJulia'
    'body': """
    ```{julia; hold=true}
    $1
    ```
    """

################################################################

  'Inline Julia Code':
    'prefix': 'inline'
    'body': """
    `j $1`
    """

################################################################

  'Latex':
    'prefix': 'latex'
    'body': """
    <!-- @af -->
    \$\$
    $1
    \$\$
    """

################################################################

  'Separator':
    'prefix': 'sep'
    'body': """
    --------------------------------------------------
    """

################################################################
