################################################################
# Regex Snippets for Julia Language
################################################################
".source.julia":
################################################################
  "Regex literal":
    prefix: "r "
    body: '''
    r"${1:regex}"
    '''
################################################################
  "Regex Start":
    prefix: "r start"
    body: '^'
################################################################
  "Regex End":
    prefix: "r end"
    body: '$'
################################################################
  "Regex Anything except newline":
    prefix: "r any except newline"
    body: '.'
################################################################
  "Regex or":
    prefix: "r or"
    body: '|'
################################################################
  "Regex escape":
    prefix: "r escape"
    body: '\\\\'
################################################################
  "Regex previous 0<= time":
    prefix: "r 0<= time"
    body: '*'
################################################################
  "Regex previous 1<= time":
    prefix: "r 1<= time"
    body: '+'
################################################################
  "Regex previous 0 or 1 time":
    prefix: "r 0 or 1 time"
    body: '?'
################################################################
  "Regex previous n times":
    prefix: "r n times"
    body: '{${1:n}}'
################################################################
  "Regex previous n<= times":
    prefix: "r n<= times"
    body: '{${1:n}, }'
################################################################
  "Regex previous n1-n2 times":
    prefix: "r n1 n2"
    body: '{${1:n1},${2:n2}}'
################################################################
  "Regex whitespace char":
    prefix: "r whitespace"
    body: '\\\\s'
################################################################
  "Regex non-whitespace char":
    prefix: "r non-whitespace"
    body: '\\\\S'
################################################################
  "Regex word char":
    prefix: "r word"
    body: '\\\\w'
################################################################
  "Regex non-word char":
    prefix: "r non-word"
    body: '\\\\W'
################################################################
  "Regex digit char":
    prefix: "r digit"
    body: '\\\\d'
################################################################
  "Regex non-digit char":
    prefix: "r non-digit"
    body: '\\\\D'
################################################################
  "Regex backspace char":
    prefix: "r backspace"
    body: '[\\\\b]'
################################################################
  "Regex control char":
    prefix: "r backspace"
    body: '\\\\c'
################################################################
  "Regex newline":
    prefix: "r newline"
    body: '\\\\n'
################################################################
  "Regex tab":
    prefix: "r tab"
    body: '\\\\t'
################################################################
  "Regex carriage return":
    prefix: "r carriage return"
    body: '\\\\r'
################################################################
  "Regex null":
    prefix: "r null"
    body: '\\\\0'
################################################################
  "Regex vertical tab":
    prefix: "r vertical tab"
    body: '\\\\v'
################################################################
  "Regex octal character ZZZ":
    prefix: "r octal"
    body: '\\\\ZZZ'
################################################################
  "Regex hex character ZZ":
    prefix: "r hex"
    body: '\\\\ZZ'
################################################################
  "Regex group":
    prefix: "r group"
    body: '(${1:chars})'
################################################################
  "Regex backreference group":
    prefix: "r backreference"
    body: '\\\\${1:groupNum}'
################################################################
  "Regex Non-capturing group":
    prefix: "r group non-capturing"
    body: '(?:${1:chars})'
################################################################
  "Regex any of":
    prefix: "r any of"
    body: '[${1:chars}]'
################################################################
  "Regex not":
    prefix: "r not"
    body: '[^${1:chars}]'
################################################################
  "Regex among char":
    prefix: "r among"
    body: '[${1:a}-${1:z}]'
################################################################
  "Regex among digits":
    prefix: "r among"
    body: '[${1:0}-${1:9}]'
################################################################
