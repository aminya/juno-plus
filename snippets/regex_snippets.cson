################################################################
# Regex Snippets for Julia Language
################################################################
".source.julia":
################################################################
  "Regex literal":
    prefix: "reg "
    body: '''
    r"${1:regex}"
    '''
################################################################
## Regex Syntax
################################################################
  "Regex Start":
    prefix: "reg start"
    body: '^'
################################################################
  "Regex End":
    prefix: "reg end"
    body: '$'
################################################################
  "Regex Anything except newline":
    prefix: "reg any except newline"
    body: '.'
################################################################
  "Regex or":
    prefix: "reg or"
    body: '|'
################################################################
  "Regex escape":
    prefix: "reg escape"
    body: '\\\\'
################################################################
  "Regex previous 0<= time":
    prefix: "reg 0 or more"
    body: '*'
################################################################
  "Regex previous 1<= time":
    prefix: "reg 1 or more"
    body: '+'
################################################################
  "Regex previous 0 or 1 time":
    prefix: "reg 0 or 1"
    body: '?'
################################################################
  "Regex previous n times":
    prefix: "reg n times"
    body: '{${1:n}}'
################################################################
  "Regex previous n<= times":
    prefix: "reg n or more"
    body: '{${1:n}, }'
################################################################
  "Regex previous n1-n2 times":
    prefix: "reg n1 n2"
    body: '{${1:n1},${2:n2}}'
################################################################
  "Regex whitespace char":
    prefix: "reg whitespace"
    body: '\\\\s'
################################################################
  "Regex non-whitespace char":
    prefix: "reg non-whitespace"
    body: '\\\\S'
################################################################
  "Regex word char":
    prefix: "reg word"
    body: '\\\\w'
################################################################
  "Regex non-word char":
    prefix: "reg non-word"
    body: '\\\\W'
################################################################
  "Regex digit char":
    prefix: "reg digit"
    body: '\\\\d'
################################################################
  "Regex non-digit char":
    prefix: "reg non-digit"
    body: '\\\\D'
################################################################
  "Regex backspace char":
    prefix: "reg backspace"
    body: '[\\\\b]'
################################################################
  "Regex control char":
    prefix: "reg backspace"
    body: '\\\\c'
################################################################
  "Regex newline":
    prefix: "reg newline"
    body: '\\\\n'
################################################################
  "Regex tab":
    prefix: "reg tab"
    body: '\\\\t'
################################################################
  "Regex carriage return":
    prefix: "reg carriage return"
    body: '\\\\r'
################################################################
  "Regex null":
    prefix: "reg null"
    body: '\\\\0'
################################################################
  "Regex vertical tab":
    prefix: "reg vertical tab"
    body: '\\\\v'
################################################################
  "Regex octal character ZZZ":
    prefix: "reg octal"
    body: '\\\\ZZZ'
################################################################
  "Regex hex character ZZ":
    prefix: "reg hex"
    body: '\\\\ZZ'
################################################################
  "Regex group":
    prefix: "reg group"
    body: '(${1:chars})'
################################################################
  "Regex backreference group":
    prefix: "reg backreference"
    body: '\\\\${1:groupNum}'
################################################################
  "Regex Non-capturing group":
    prefix: "reg group non-capturing"
    body: '(?:${1:chars})'
################################################################
  "Regex any of":
    prefix: "reg any of"
    body: '[${1:chars}]'
################################################################
  "Regex not":
    prefix: "reg not"
    body: '[^${1:chars}]'
################################################################
  "Regex among char":
    prefix: "reg among char"
    body: '[${1:a}-${1:z}]'
################################################################
  "Regex among digits":
    prefix: "reg among number"
    body: '[${1:0}-${1:9}]'
################################################################
  "Regex positive lookahead group":
    prefix: "reg group positive lookahead"
    body: '(?=${1:chars})'
################################################################
  "Regex negative lookahead group":
    prefix: "reg group negative lookahead"
    body: '(?!${1:chars})'
################################################################
  "Regex negative lookbehind":
    prefix: "reg group negative lookbehind"
    body: '?!='
################################################################
  "Regex Word Boundary":
    prefix: "reg word boundary"
    body: '\\\\b'
################################################################
## Regex Common
################################################################
## Numbers
################################################################
  "Regex whole numbers":
    prefix: "regc numbers whole"
    body: '^\\\\d+$'
################################################################
  "Regex decimal number":
    prefix: "regc numbers decimal"
    body: '^\\\\d*\\\\.\\\\d+$'
################################################################
  "Regex whole + decimal number":
    prefix: "regc numbers whole + decimal"
    body: '^\\\\d*(\\\\.\\\\d+)?$'
################################################################
  "Regex negative, positive whole + decimal number":
    prefix: "regc numbers negative, positive whole + decimal"
    body: '^-?\\\\d*(\\\\.\\\\d+)?$'
################################################################
  "Regex whole + decimal + fractions numbers":
    prefix: "regc numbers whole + decimal + fractions "
    body: '[-]?[0-9]+[,.]?[0-9]*([\\\\/][0-9]+[,.]?[0-9]*)*'
################################################################
## Strings
################################################################
  "Regex slug":
    prefix: "regc slug"
    body: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
################################################################
  "Regex duplicates":
    prefix: "regc duplicates"
    body: '(\\\\b\\\\w+\\\\b)(?=.*\\\\b\\\\1\\\\b)'
################################################################
## Alphanumeric Characters
################################################################
  "Regex alphanumeric without space":
    prefix: "regc alphanumeric without space"
    body: '^[a-zA-Z0-9]*$'
################################################################
  "Regex alphanumeric with space":
    prefix: "regc alphanumeric with space "
    body: '^[a-zA-Z0-9 ]*$'
################################################################
## File Path
################################################################
  "Regex file path with filename.extension":
    prefix: "regc file path with filename.extension"
    body: '((\\\\/|\\\\\\\\|\\\\/\\\\/|https?:\\\\\\\\\\\\\\\\|https?:\\\\/\\\\/)[a-z0-9 _@\\\\-^!#$%&+={}.\\\\/\\\\\\\\\\\\[\\\\]]+)+\\\\.[a-z]+$'
################################################################
  "Regex file path with optinal filename.extension":
    prefix: "regc file path optinal filename.extension"
    body: '^(.+)/([^/]+)$'
################################################################
  "Regex filename.extension (3 chars)":
    prefix: "regc filename.extension"
    body: '^(.+)/([^/]+)$'
################################################################
## Dates
################################################################
  "Regex date YYYY-MM-dd":
    prefix: "regc date YYYYMMdd"
    body: '([12]\\\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\\d|3[01]))'
################################################################
  "Regex date dd-MM-YYYY using -,. , / with check for leap year":
    prefix: "regc date ddMMYYYY"
    body: '^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$'
################################################################
  "Regex date dd-mmm-YYYY using separators -, ., /":
    prefix: "regc date ddmmmYYYY"
    body: '^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)(?:0?2|(?:Feb))\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$'
################################################################
## Time
################################################################
  "Regex time HH:MM 12-hour, optional leading 0":
    prefix: "regc time HHMM 12h optional leading 0"
    body: '^(0?[1-9]|1[0-2]):[0-5][0-9]$'
################################################################
  "Regex time HH:MM 12-hour AM/PM optional leading 0":
    prefix: "regc time HHMM 12h AM/PM optional leading 0"
    body: '((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))'
################################################################
  "Regex time HH:MM 24-hour with leading 0":
    prefix: "regc time HHMM 24h with leading 0"
    body: '^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'
################################################################
  "Regex time HH:MM 24-hour, optional leading 0":
    prefix: "regc time HHMM 24h, optional leading 0"
    body: '^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'
################################################################
  "Regex time HH:MM:SS 24-hour":
    prefix: "regc time HHMMSS 24h"
    body: '(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)'
################################################################
## Email
################################################################
  "Regex email common":
    prefix: "regc email common"
    body: '^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,6})*$'
################################################################
  "Regex email uncommon":
    prefix: "regc email uncommon"
    body: '^([a-z0-9_\\\\.\\\\+-]+)@([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})$'
################################################################
## Password Strength
################################################################
  "Regex password complex":
    prefix: "regc password complex"
    body: '''(?=(.*[0-9]))(?=.*[\\\\!@#$%^&*()\\\\\\\\[\\\\]{}\\\\-_+=~`|:;"'<>,./?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,}'''
    description: 'Should have 1 lowercase letter, 1 uppercase letter, 1 number, 1 special character and be at least 8 characters long'
################################################################
  "Regex password moderate":
    prefix: "regc password moderate"
    body: '''(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$'''
    description: 'Should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 8 characters long'
################################################################
## Username
################################################################
  "Regex username":
    prefix: "regc username"
    body: '''(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$'''
    description: 'Alphanumeric string that may include _ and – having a length of 3 to 16 characters'
################################################################
## URL
################################################################
  "Regex url http(s)":
    prefix: "regc url http(s)"
    body: 'https?:\\\\/\\\\/(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_\\\\+.~#()?&//=]*)'
################################################################
  "Regex url protocol optional":
    prefix: "regc url optional protocol"
    body: '(https?:\\\\/\\\\/)?(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_\\\\+.~#?&//=]*)'
################################################################
## IP Address
################################################################
  "Regex IPv4 address":
    prefix: "regc IPv4"
    body: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'
################################################################
  "Regex IPv6 address":
    prefix: "regc IPv6"
    body: '(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))'
################################################################
  "Regex IPv4 or IPv6 address":
    prefix: "regc IPv4 or IPv6"
    body: '((^\\\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\\\s*$)|(^\\\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))(%.+)?\\\\s*$))'
################################################################
## Identity Documents
################################################################
  "Regex passport":
    prefix: "regc passport"
    body: '^[A-PR-WY][1-9]\\\\d\\\\s?\\\\d{4}[1-9]$'
