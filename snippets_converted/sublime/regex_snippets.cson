{
  "#": "Generated with Atomizr â€“ https://atom.io/packages/atomizr",
  "scope": "source.julia",
  "completions": [
    {
      "contents": "r\"${1:regex}\"",
      "trigger": "reg \tRegex literal"
    },
    {
      "contents": "^",
      "trigger": "reg start\tRegex Start"
    },
    {
      "contents": "$",
      "trigger": "reg end\tRegex End"
    },
    {
      "contents": ".",
      "trigger": "reg any except newline\tRegex Anything except newline"
    },
    {
      "contents": "|",
      "trigger": "reg or\tRegex or"
    },
    {
      "contents": "\\\\",
      "trigger": "reg escape\tRegex escape"
    },
    {
      "contents": "*",
      "trigger": "reg 0 or more\tRegex previous 0<= time"
    },
    {
      "contents": "+",
      "trigger": "reg 1 or more\tRegex previous 1<= time"
    },
    {
      "contents": "?",
      "trigger": "reg 0 or 1\tRegex previous 0 or 1 time"
    },
    {
      "contents": "{${1:n}}",
      "trigger": "reg n times\tRegex previous n times"
    },
    {
      "contents": "{${1:n}, }",
      "trigger": "reg n or more\tRegex previous n<= times"
    },
    {
      "contents": "{${1:n1},${2:n2}}",
      "trigger": "reg n1 n2\tRegex previous n1-n2 times"
    },
    {
      "contents": "\\\\s",
      "trigger": "reg whitespace\tRegex whitespace char"
    },
    {
      "contents": "\\\\S",
      "trigger": "reg non-whitespace\tRegex non-whitespace char"
    },
    {
      "contents": "\\\\w",
      "trigger": "reg word\tRegex word char"
    },
    {
      "contents": "\\\\W",
      "trigger": "reg non-word\tRegex non-word char"
    },
    {
      "contents": "\\\\d",
      "trigger": "reg digit\tRegex digit char"
    },
    {
      "contents": "\\\\D",
      "trigger": "reg non-digit\tRegex non-digit char"
    },
    {
      "contents": "[\\\\b]",
      "trigger": "reg backspace\tRegex backspace char"
    },
    {
      "contents": "\\\\c",
      "trigger": "reg backspace\tRegex control char"
    },
    {
      "contents": "\\\\n",
      "trigger": "reg newline\tRegex newline"
    },
    {
      "contents": "\\\\t",
      "trigger": "reg tab\tRegex tab"
    },
    {
      "contents": "\\\\r",
      "trigger": "reg carriage return\tRegex carriage return"
    },
    {
      "contents": "\\\\0",
      "trigger": "reg null\tRegex null"
    },
    {
      "contents": "\\\\v",
      "trigger": "reg vertical tab\tRegex vertical tab"
    },
    {
      "contents": "\\\\ZZZ",
      "trigger": "reg octal\tRegex octal character ZZZ"
    },
    {
      "contents": "\\\\ZZ",
      "trigger": "reg hex\tRegex hex character ZZ"
    },
    {
      "contents": "(${1:chars})",
      "trigger": "reg group\tRegex group"
    },
    {
      "contents": "\\\\${1:groupNum}",
      "trigger": "reg backreference\tRegex backreference group"
    },
    {
      "contents": "(?:${1:chars})",
      "trigger": "reg group non-capturing\tRegex Non-capturing group"
    },
    {
      "contents": "[${1:chars}]",
      "trigger": "reg any of\tRegex any of"
    },
    {
      "contents": "[^${1:chars}]",
      "trigger": "reg not\tRegex not"
    },
    {
      "contents": "[${1:a}-${1:z}]",
      "trigger": "reg among char\tRegex among char"
    },
    {
      "contents": "[${1:0}-${1:9}]",
      "trigger": "reg among number\tRegex among digits"
    },
    {
      "contents": "(?=${1:chars})",
      "trigger": "reg group positive lookahead\tRegex positive lookahead group"
    },
    {
      "contents": "(?!${1:chars})",
      "trigger": "reg group negative lookahead\tRegex negative lookahead group"
    },
    {
      "contents": "?!=",
      "trigger": "reg group negative lookbehind\tRegex negative lookbehind"
    },
    {
      "contents": "\\\\b",
      "trigger": "reg word boundary\tRegex Word Boundary"
    },
    {
      "contents": "^\\\\d+$",
      "trigger": "regc numbers whole\tRegex whole numbers"
    },
    {
      "contents": "^\\\\d*\\\\.\\\\d+$",
      "trigger": "regc numbers decimal\tRegex decimal number"
    },
    {
      "contents": "^\\\\d*(\\\\.\\\\d+)?$",
      "trigger": "regc numbers whole + decimal\tRegex whole + decimal number"
    },
    {
      "contents": "^-?\\\\d*(\\\\.\\\\d+)?$",
      "trigger": "regc numbers negative, positive whole + decimal\tRegex negative, positive whole + decimal number"
    },
    {
      "contents": "[-]?[0-9]+[,.]?[0-9]*([\\\\/][0-9]+[,.]?[0-9]*)*",
      "trigger": "regc numbers whole + decimal + fractions \tRegex whole + decimal + fractions numbers"
    },
    {
      "contents": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
      "trigger": "regc slug\tRegex slug"
    },
    {
      "contents": "(\\\\b\\\\w+\\\\b)(?=.*\\\\b\\\\1\\\\b)",
      "trigger": "regc duplicates\tRegex duplicates"
    },
    {
      "contents": "^[a-zA-Z0-9]*$",
      "trigger": "regc alphanumeric without space\tRegex alphanumeric without space"
    },
    {
      "contents": "^[a-zA-Z0-9 ]*$",
      "trigger": "regc alphanumeric with space \tRegex alphanumeric with space"
    },
    {
      "contents": "((\\\\/|\\\\\\\\|\\\\/\\\\/|https?:\\\\\\\\\\\\\\\\|https?:\\\\/\\\\/)[a-z0-9 _@\\\\-^!#$%&+={}.\\\\/\\\\\\\\\\\\[\\\\]]+)+\\\\.[a-z]+$",
      "trigger": "regc file path with filename.extension\tRegex file path with filename.extension"
    },
    {
      "contents": "^(.+)/([^/]+)$",
      "trigger": "regc file path optional filename.extension\tRegex file path with optional filename.extension"
    },
    {
      "contents": "^(.+)/([^/]+)$",
      "trigger": "regc filename.extension\tRegex filename.extension (3 chars)"
    },
    {
      "contents": "([12]\\\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\\d|3[01]))",
      "trigger": "regc date YYYYMMdd\tRegex date YYYY-MM-dd"
    },
    {
      "contents": "^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$",
      "trigger": "regc date ddMMYYYY\tRegex date dd-MM-YYYY using -,. , / with check for leap year"
    },
    {
      "contents": "^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)(?:0?2|(?:Feb))\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$",
      "trigger": "regc date ddmmmYYYY\tRegex date dd-mmm-YYYY using separators -, ., /"
    },
    {
      "contents": "^(0?[1-9]|1[0-2]):[0-5][0-9]$",
      "trigger": "regc time HHMM 12h optional leading 0\tRegex time HH:MM 12-hour, optional leading 0"
    },
    {
      "contents": "((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))",
      "trigger": "regc time HHMM 12h AM/PM optional leading 0\tRegex time HH:MM 12-hour AM/PM optional leading 0"
    },
    {
      "contents": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
      "trigger": "regc time HHMM 24h with leading 0\tRegex time HH:MM 24-hour with leading 0"
    },
    {
      "contents": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
      "trigger": "regc time HHMM 24h, optional leading 0\tRegex time HH:MM 24-hour, optional leading 0"
    },
    {
      "contents": "(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)",
      "trigger": "regc time HHMMSS 24h\tRegex time HH:MM:SS 24-hour"
    },
    {
      "contents": "^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,6})*$",
      "trigger": "regc email common\tRegex email common"
    },
    {
      "contents": "^([a-z0-9_\\\\.\\\\+-]+)@([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})$",
      "trigger": "regc email uncommon\tRegex email uncommon"
    },
    {
      "contents": "(?=(.*[0-9]))(?=.*[\\\\!@#$%^&*()\\\\\\\\[\\\\]{}\\\\-_+=~`|:;\"'<>,./?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,}",
      "trigger": "regc password complex\tRegex password complex"
    },
    {
      "contents": "(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$",
      "trigger": "regc password moderate\tRegex password moderate"
    },
    {
      "contents": "(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$",
      "trigger": "regc username\tRegex username"
    },
    {
      "contents": "https?:\\\\/\\\\/(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_\\\\+.~#()?&//=]*)",
      "trigger": "regc url http(s)\tRegex url http(s)"
    },
    {
      "contents": "(https?:\\\\/\\\\/)?(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_\\\\+.~#?&//=]*)",
      "trigger": "regc url optional protocol\tRegex url protocol optional"
    },
    {
      "contents": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
      "trigger": "regc IPv4\tRegex IPv4 address"
    },
    {
      "contents": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))",
      "trigger": "regc IPv6\tRegex IPv6 address"
    },
    {
      "contents": "((^\\\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\\\s*$)|(^\\\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))(%.+)?\\\\s*$))",
      "trigger": "regc IPv4 or IPv6\tRegex IPv4 or IPv6 address"
    },
    {
      "contents": "^[A-PR-WY][1-9]\\\\d\\\\s?\\\\d{4}[1-9]$",
      "trigger": "regc passport\tRegex passport"
    }
  ]
}
